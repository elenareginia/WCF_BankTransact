//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BankClient.MainService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Client", Namespace="http://schemas.datacontract.org/2004/07/Domain")]
    [System.SerializableAttribute()]
    public partial class Client : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountNumber {
            get {
                return this.AccountNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNumberField, value) != true)) {
                    this.AccountNumberField = value;
                    this.RaisePropertyChanged("AccountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondName {
            get {
                return this.SecondNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondNameField, value) != true)) {
                    this.SecondNameField = value;
                    this.RaisePropertyChanged("SecondName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MainService.IMainService")]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Transfer", ReplyAction="http://tempuri.org/IMainService/TransferResponse")]
        bool Transfer(string fromAccount, string toAccount, decimal money);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Transfer", ReplyAction="http://tempuri.org/IMainService/TransferResponse")]
        System.Threading.Tasks.Task<bool> TransferAsync(string fromAccount, string toAccount, decimal money);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Seed", ReplyAction="http://tempuri.org/IMainService/SeedResponse")]
        void Seed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/Seed", ReplyAction="http://tempuri.org/IMainService/SeedResponse")]
        System.Threading.Tasks.Task SeedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetAllClients", ReplyAction="http://tempuri.org/IMainService/GetAllClientsResponse")]
        BankClient.MainService.Client[] GetAllClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/GetAllClients", ReplyAction="http://tempuri.org/IMainService/GetAllClientsResponse")]
        System.Threading.Tasks.Task<BankClient.MainService.Client[]> GetAllClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddMoneyToAcc", ReplyAction="http://tempuri.org/IMainService/AddMoneyToAccResponse")]
        bool AddMoneyToAcc(string accountNumber, decimal moneyToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/AddMoneyToAcc", ReplyAction="http://tempuri.org/IMainService/AddMoneyToAccResponse")]
        System.Threading.Tasks.Task<bool> AddMoneyToAccAsync(string accountNumber, decimal moneyToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RemoveMoneyFromAcc", ReplyAction="http://tempuri.org/IMainService/RemoveMoneyFromAccResponse")]
        bool RemoveMoneyFromAcc(string accountNumber, decimal moneyToRemove);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/RemoveMoneyFromAcc", ReplyAction="http://tempuri.org/IMainService/RemoveMoneyFromAccResponse")]
        System.Threading.Tasks.Task<bool> RemoveMoneyFromAccAsync(string accountNumber, decimal moneyToRemove);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : BankClient.MainService.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.ClientBase<BankClient.MainService.IMainService>, BankClient.MainService.IMainService {
        
        public MainServiceClient() {
        }
        
        public MainServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MainServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Transfer(string fromAccount, string toAccount, decimal money) {
            return base.Channel.Transfer(fromAccount, toAccount, money);
        }
        
        public System.Threading.Tasks.Task<bool> TransferAsync(string fromAccount, string toAccount, decimal money) {
            return base.Channel.TransferAsync(fromAccount, toAccount, money);
        }
        
        public void Seed() {
            base.Channel.Seed();
        }
        
        public System.Threading.Tasks.Task SeedAsync() {
            return base.Channel.SeedAsync();
        }
        
        public BankClient.MainService.Client[] GetAllClients() {
            return base.Channel.GetAllClients();
        }
        
        public System.Threading.Tasks.Task<BankClient.MainService.Client[]> GetAllClientsAsync() {
            return base.Channel.GetAllClientsAsync();
        }
        
        public bool AddMoneyToAcc(string accountNumber, decimal moneyToAdd) {
            return base.Channel.AddMoneyToAcc(accountNumber, moneyToAdd);
        }
        
        public System.Threading.Tasks.Task<bool> AddMoneyToAccAsync(string accountNumber, decimal moneyToAdd) {
            return base.Channel.AddMoneyToAccAsync(accountNumber, moneyToAdd);
        }
        
        public bool RemoveMoneyFromAcc(string accountNumber, decimal moneyToRemove) {
            return base.Channel.RemoveMoneyFromAcc(accountNumber, moneyToRemove);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveMoneyFromAccAsync(string accountNumber, decimal moneyToRemove) {
            return base.Channel.RemoveMoneyFromAccAsync(accountNumber, moneyToRemove);
        }
    }
}
